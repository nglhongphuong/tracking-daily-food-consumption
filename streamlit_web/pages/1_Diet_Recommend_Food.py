import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
from streamlit_echarts import st_echarts

st.set_page_config(page_title="G·ª£i √ù M√≥n ƒÇn", layout="wide")

# H√†m t√≠nh BMI
def compute_bmi(weight, height):
    height_m = height / 100
    return round(weight / (height_m ** 2), 2)

# H√†m ph√¢n lo·∫°i BMI
def bmi_category(bmi):
    if bmi < 18.5:
        return "G·∫ßy", "B·∫°n n√™n tƒÉng c∆∞·ªùng dinh d∆∞·ª°ng v√† t·∫≠p luy·ªán ƒë·ªÉ ƒë·∫°t c√¢n n·∫∑ng h·ª£p l√Ω. H√£y b·ªï sung th·ª±c ph·∫©m gi√†u protein, ch·∫•t b√©o l√†nh m·∫°nh v√† t·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n."
    elif 18.5 <= bmi < 24.9:
        return "B√¨nh th∆∞·ªùng", "Ch√∫c m·ª´ng! B·∫°n c√≥ ch·ªâ s·ªë BMI l√Ω t∆∞·ªüng. H√£y duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng c√¢n b·∫±ng v√† t·∫≠p th·ªÉ d·ª•c ƒë·ªÉ gi·ªØ g√¨n s·ª©c kh·ªèe."
    elif 25 <= bmi < 29.9:
        return "Th·ª´a c√¢n", "B·∫°n c·∫ßn ki·ªÉm so√°t l∆∞·ª£ng calo n·∫°p v√†o v√† tƒÉng c∆∞·ªùng v·∫≠n ƒë·ªông. H√£y ∆∞u ti√™n th·ª±c ph·∫©m gi√†u ch·∫•t x∆°, √≠t ƒë∆∞·ªùng v√† th∆∞·ªùng xuy√™n t·∫≠p luy·ªán."
    else:
        return "B√©o ph√¨", "C·∫£nh b√°o! B·∫°n c√≥ nguy c∆° m·∫Øc c√°c b·ªánh li√™n quan ƒë·∫øn b√©o ph√¨. H√£y x√¢y d·ª±ng ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh, gi·∫£m tinh b·ªôt, ƒë∆∞·ªùng v√† tƒÉng c∆∞·ªùng ho·∫°t ƒë·ªông th·ªÉ ch·∫•t."




# H√†m t√≠nh BMR
def compute_bmr_asian(gender, weight, height, age):
    if gender == 'Nam':
        return round(66 + (13.7 * weight) + (5 * height) - (6.8 * age), 2)
    else:
        return round(655 + (9.6 * weight) + (1.8 * height) - (4.7 * age), 2)

# H√†m t√≠nh t·ªïng calo c·∫ßn thi·∫øt
def calculate_daily_calories(bmr, activity_level):
    activity_multipliers = {
        '√çt v·∫≠n ƒë·ªông': 1.2,
        'V·∫≠n ƒë·ªông nh·∫π': 1.375,
        'V·∫≠n ƒë·ªông v·ª´a': 1.55,
        'V·∫≠n ƒë·ªông m·∫°nh': 1.725,
        'V·∫≠n ƒë·ªông r·∫•t m·∫°nh': 1.9
    }
    return round(bmr * activity_multipliers.get(activity_level, 1.2), 2)


def suggest_meals(filtered_df,calories):
    return filtered_df[filtered_df["Calories (kcal)"] <= calories].sample(n=min(5, len(filtered_df)))


# H√†m t√≠nh t·ªïng dinh d∆∞·ª°ng t·ª´ c√°c m√≥n ƒë√£ ch·ªçn
def get_nutrition_total():
    selected_meals = [
        st.session_state.breakfast_options[st.session_state.breakfast_options["T√äN TH·ª®C ƒÇN"] == st.session_state["selected_breakfast"]],
        st.session_state.lunch_options[st.session_state.lunch_options["T√äN TH·ª®C ƒÇN"] == st.session_state["selected_lunch"]],
        st.session_state.dinner_options[st.session_state.dinner_options["T√äN TH·ª®C ƒÇN"] == st.session_state["selected_dinner"]]
    ]

    total_nutrition = {
        "Calories (kcal)": 0,
        "Protein (g)": 0,
        "Fat (g)": 0,
        "Carbonhydrates (g)": 0,
        "Ch·∫•t x∆° (g)": 0,
        "Cholesterol (mg)": 0,
        "Canxi (mg)": 0,
        "Photpho (mg)": 0,
        "S·∫Øt (mg)": 0,
        "Natri (mg)": 0,
        "Kali (mg)": 0,
        "Beta Caroten (mcg)": 0,
        "Vitamin A (mcg)": 0,
        "Vitamin B1 (mg)": 0,
        "Vitamin C (mg)": 0
    }

    for meal in selected_meals:
        if not meal.empty:
            for key in total_nutrition.keys():
                try:
                    total_nutrition[key] += float(meal[key].values[0])
                except ValueError:
                    print(f"Warning: Could not convert value {meal[key].values[0]} for key {key}")

    return total_nutrition


st.title("üçΩÔ∏è G·ª£i √ù B·ªØa ƒÇn C√° Nh√¢n H√≥a Cho B·∫°n")

# Thi·∫øt k·∫ø form nh·∫≠p th√¥ng tin
with st.form(key="personal_info_form"):
    st.markdown("### üîç Th√¥ng tin c∆° b·∫£n")

    col1, col2 = st.columns(2)
    with col1:
        gender = st.selectbox("Gi·ªõi t√≠nh", ['Nam', 'N·ªØ'])
        weight = st.number_input("C√¢n n·∫∑ng (kg)", min_value=1, value=60)
        age = st.number_input("Tu·ªïi", min_value=1, value=25)

    with col2:
        height = st.number_input("Chi·ªÅu cao (cm)", min_value=1, value=160)
        activity_level = st.selectbox("M·ª©c ƒë·ªô v·∫≠n ƒë·ªông",
                                      ['√çt v·∫≠n ƒë·ªông', 'V·∫≠n ƒë·ªông nh·∫π', 'V·∫≠n ƒë·ªông v·ª´a', 'V·∫≠n ƒë·ªông m·∫°nh',
                                       'V·∫≠n ƒë·ªông r·∫•t m·∫°nh'])
        goal = st.selectbox("M·ª•c ti√™u", ['TƒÉng c√¢n', 'Gi·∫£m c√¢n', 'Duy tr√¨'])

    submit_button = st.form_submit_button("üìä T√≠nh to√°n & Xem g·ª£i √Ω")

# L∆∞u tr·∫°ng th√°i t√≠nh to√°n
if "bmi" not in st.session_state:
    st.session_state.bmi = None
if "bmr" not in st.session_state:
    st.session_state.bmr = None
if "daily_calories" not in st.session_state:
    st.session_state.daily_calories = None
if "breakfast_options" not in st.session_state:
    st.session_state.breakfast_options = None
if "lunch_options" not in st.session_state:
    st.session_state.lunch_options = None
if "dinner_options" not in st.session_state:
    st.session_state.dinner_options = None

if submit_button:
    st.success("‚úÖ Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t! ƒêang t√≠nh to√°n...")
    # T·∫£i d·ªØ li·ªáu th·ª©c ƒÉn
    sheet_id = "1mjMrweeCQVRrOiqQRkJGe66DWbzTKsJh"
    csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv"
    df = pd.read_csv(csv_url).dropna().reset_index(drop=True)
    df["Calories (kcal)"] = pd.to_numeric(df["Calories (kcal)"], errors='coerce')

    # Ph√¢n nh√≥m calo b·∫±ng KMeans
    scaler = MinMaxScaler()
    df_scaled = scaler.fit_transform(df[["Calories (kcal)"]])
    kmeans = KMeans(n_clusters=3, random_state=42)
    df["Calorie Type"] = kmeans.fit_predict(df_scaled)
    df["Calorie Type"] = df["Calorie Type"].map({0: 'Calo th·∫•p', 1: 'Calo trung b√¨nh', 2: 'Calo cao'})

    # L·ªçc th·ª©c ƒÉn ph√π h·ª£p
    if goal == 'TƒÉng c√¢n':
        filtered_df = df[df["Calorie Type"].isin(['Calo trung b√¨nh', 'Calo cao'])]
    elif goal == 'Gi·∫£m c√¢n':
        filtered_df = df[df["Calorie Type"] == 'Calo th·∫•p']
    else:
        filtered_df = df
    st.session_state.bmi = compute_bmi(weight, height)
    st.session_state.bmr = compute_bmr_asian(gender, weight, height, age)
    st.session_state.daily_calories = calculate_daily_calories(st.session_state.bmr, activity_level)
    st.session_state.breakfast_options = suggest_meals(filtered_df,round(st.session_state.daily_calories * 0.3, 2))
    st.session_state.lunch_options = suggest_meals(filtered_df,round(st.session_state.daily_calories * 0.4, 2))
    st.session_state.dinner_options = suggest_meals(filtered_df,round(st.session_state.daily_calories * 0.3, 2))

# Hi·ªÉn th·ªã k·∫øt qu·∫£ BMI v√† calo n·∫øu ƒë√£ t√≠nh
if st.session_state.bmi is not None:
    bmi_status,advice = bmi_category(st.session_state.bmi)

    st.subheader("üìå T√¨nh tr·∫°ng c∆° th·ªÉ")
    st.markdown(f"""
        **üìù Ch·ªâ s·ªë BMI:** `{st.session_state.bmi}` ({bmi_status})  
        üî• **BMR:** `{st.session_state.bmr} kcal/ng√†y`  
        ‚ö° **Nhu c·∫ßu calo/ng√†y:** `{st.session_state.daily_calories} kcal`  
        üí° **L·ªùi khuy√™n:** *{advice}*  
        """, unsafe_allow_html=True)


    st.subheader("üçõ G·ª£i √ù M√≥n ƒÇn")

    col1, col2, col3 = st.columns(3)

    def select_meal(meal_name, meal_options):
        key = f"selected_{meal_name}"
        st.write(meal_options[["T√äN TH·ª®C ƒÇN","Calories (kcal)","Protein (g)","Fat (g)","Carbonhydrates (g)","Ch·∫•t x∆° (g)","Cholesterol (mg)","Canxi (mg)","Photpho (mg)","S·∫Øt (mg)","Natri (mg)","Kali (mg)","Beta Caroten (mcg)","Vitamin A (mcg)","Vitamin B1 (mg)","Vitamin C (mg)","Lo·∫°i"]])
        if key not in st.session_state:
            st.session_state[key] = meal_options["T√äN TH·ª®C ƒÇN"].tolist()[0] if not meal_options.empty else "Kh√¥ng c√≥ g·ª£i √Ω"

        selected_meal = st.selectbox(f"Ch·ªçn m√≥n ({meal_name})",
                                     meal_options["T√äN TH·ª®C ƒÇN"].tolist() if not meal_options.empty else ["Kh√¥ng c√≥ g·ª£i √Ω"],
                                     key=key)
        st.write(f"**M√≥n ƒë√£ ch·ªçn:** {st.session_state[key]}")
        # L·∫•y d√≤ng th·ª©c ƒÉn ƒë∆∞·ª£c ch·ªçn
        selected_info = meal_options[meal_options["T√äN TH·ª®C ƒÇN"] == st.session_state[key]]
        if not selected_info.empty:
            # Hi·ªÉn th·ªã h√¨nh ·∫£nh n·∫øu c√≥
            image_url = selected_info["H√¨nh"].values[0]  # L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh t·ª´ DataFrame
            if image_url and isinstance(image_url, str):
                # D√πng markdown v·ªõi CSS ƒë·ªÉ ƒë·∫∑t k√≠ch th∆∞·ªõc ·∫£nh c·ªë ƒë·ªãnh
                st.markdown(
                    f"""
                                <div style="display: flex; justify-content: center;">
                                    <img src="{image_url}" style="width: 300px; height: 250px; object-fit: cover; border-radius: 10px;padding:5px;">
                                </div>
                                """,
                    unsafe_allow_html=True
                )


    with col1:
        st.markdown(f"### üç≥ Bu·ªïi s√°ng ({round(st.session_state.daily_calories * 0.3, 2)} kcal)")
        select_meal("breakfast", st.session_state.breakfast_options)

    with col2:
        st.markdown(f"### üçõ Bu·ªïi tr∆∞a ({round(st.session_state.daily_calories * 0.4, 2)} kcal)")
        select_meal("lunch", st.session_state.lunch_options)

    with col3:
        st.markdown(f"### üåô Bu·ªïi t·ªëi ({round(st.session_state.daily_calories * 0.3, 2)} kcal)")
        select_meal("dinner", st.session_state.dinner_options)

    # L·∫•y t·ªïng d·ªØ li·ªáu dinh d∆∞·ª°ng
    nutrition_total = get_nutrition_total()

    import streamlit as st
    from streamlit_echarts import st_echarts

    # Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì tr√≤n
    data = [
        {"value": nutrition_total["Calories (kcal)"], "name": "Calories (kcal)"},
        {"value": nutrition_total["Protein (g)"], "name": "Protein (g)"},
        {"value": nutrition_total["Fat (g)"], "name": "Fat (g)"},
        {"value": nutrition_total["Carbonhydrates (g)"], "name": "Carbs (g)"},
        {"value": nutrition_total["Ch·∫•t x∆° (g)"], "name": "Ch·∫•t x∆° (g)"},
        {"value": nutrition_total["Cholesterol (mg)"], "name": "Cholesterol (g)"},
        {"value": nutrition_total["Canxi (mg)"], "name": "Canxi (mg)"},
        {"value": nutrition_total["Photpho (mg)"], "name": "Photpho (mg)"},
        {"value": nutrition_total["S·∫Øt (mg)"], "name": "S·∫Øt (mg)"},
        {"value": nutrition_total["Natri (mg)"], "name": "Natri (mg)"},
        {"value": nutrition_total["Kali (mg)"], "name": "Kali (mg)"},
        {"value": nutrition_total["Beta Caroten (mcg)"], "name": "Beta Caroten (mcg)"},
        {"value": nutrition_total["Vitamin A (mcg)"], "name": "Vitamin A (mcg)"},
        {"value": nutrition_total["Vitamin B1 (mg)"], "name": "Vitamin B1 (mg)"},
        {"value": nutrition_total["Vitamin C (mg)"], "name": "Vitamin C (mg)"}
    ]
    st.markdown("## üìä T·ªïng Quan Dinh D∆∞·ª°ng")

    # C·∫•u h√¨nh bi·ªÉu ƒë·ªì
    option = {
        "title": {
            "left": "center",
            "top": "2%",
            "textStyle": {"fontSize": 18, "fontWeight": "bold", "color": "#333"},
        },
        "tooltip": {"trigger": "item", "formatter": "{b}: {c} ({d}%)"},
        "legend": {
            "orient": "horizontal",
            "bottom": "5%",  # ƒê∆∞a ch√∫ th√≠ch l√™n cao h∆°n
            "textStyle": {"fontSize": 14, "color": "#333"},
        },
        "series": [
            {
                "name": "Dinh d∆∞·ª°ng",
                "type": "pie",
                "radius": ["40%", "70%"],  # Donut Chart
                "center": ["50%", "40%"],  # Di chuy·ªÉn bi·ªÉu ƒë·ªì l√™n tr√™n
                "avoidLabelOverlap": True,
                "itemStyle": {
                    "borderRadius": 10,
                    "borderColor": "#fff",
                    "borderWidth": 3,
                },
                "label": {
                    "show": False,
                    "position": "outside",
                    "formatter": "{b}: {c}",
                    "fontSize": 12,
                    "color": "#333",
                },
                "emphasis": {
                    "label": {
                        "show": True,
                        "fontSize": 16,
                        "fontWeight": "bold",
                        "color": "#E91E63",
                    }
                },
                "labelLine": {"show": True, "smooth": 0.2},
                "data": [
                    {
                        **item,
                        "itemStyle": {
                            "color": f"rgba({i * 40 % 255},{(i * 70) % 255},{(i * 100) % 255}, 0.8)"
                        },
                    }
                    for i, item in enumerate(data)
                ],
            }
        ],
    }

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st_echarts(options=option, height="400px")  # TƒÉng chi·ªÅu cao ƒë·ªÉ tr√°nh b·ªã che
